#BlueJ class context
comment0.target=Field
comment0.text=\r\n\ Represent\ a\ rectangular\ grid\ of\ field\ positions.\r\n\ Each\ position\ is\ able\ to\ store\ a\ single\ animal.\r\n\ \r\n\ @author\ David\ J.\ Barnes\ and\ Michael\ K\u00F6lling,\ Adam\ Murray\ and\ Ryan\ Yan\r\n\ @version\ 2022.02.28\r\n
comment1.params=depth\ width\ listOfDisasters
comment1.target=Field(int,\ int,\ java.util.List)
comment1.text=\r\n\ Represent\ a\ field\ of\ the\ given\ dimensions.\r\n\ @param\ depth\ The\ depth\ of\ the\ field.\r\n\ @param\ width\ The\ width\ of\ the\ field.\r\n
comment10.params=plant\ row\ col
comment10.target=void\ placePlant(Plant,\ int,\ int)
comment10.text=\r\n\ Place\ given\ plant\ at\ the\ given\ location.\r\n\ If\ there\ is\ already\ a\ plant\ at\ the\ location\ it\ will\ be\ lost.\r\n\ @param\ plant\ The\ plant\ to\ be\ placed.\r\n\ @param\ row\ Row\ coordinate\ of\ the\ location.\r\n\ @param\ col\ Column\ coordinate\ of\ the\ location.\r\n
comment11.params=location
comment11.target=Animal\ getAnimalAt(Location)
comment11.text=\r\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ location\ Where\ in\ the\ field.\r\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment12.params=location
comment12.target=Plant\ getPlantAt(Location)
comment12.text=\r\n\ Return\ the\ plant\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ location\ Where\ in\ the\ field\r\n\ @return\ The\ plant\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment13.params=location
comment13.target=java.util.Set\ getAnimalAndPlantSetAt(Location)
comment13.text=\r\n\ Returns\ the\ set\ containing\ both\ animal\ and\ plant\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ location\ The\ location\ from\ which\ animals\ and\ plants\ are\ to\ be\ returned.\r\n\ @return\ The\ set\ containing\ both\ animal\ and\ plant\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment14.params=row\ col
comment14.target=Animal\ getAnimalAt(int,\ int)
comment14.text=\r\n\ Return\ the\ animal\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ row\ The\ desired\ row.\r\n\ @param\ col\ The\ desired\ column.\r\n\ @return\ The\ animal\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment15.params=row\ col
comment15.target=Plant\ getPlantAt(int,\ int)
comment15.text=\r\n\ Return\ the\ plant\ at\ the\ given\ location,\ if\ any.\r\n\ @param\ row\ The\ desired\ row.\r\n\ @param\ col\ The\ desired\ column.\r\n\ @return\ The\ plant\ at\ the\ given\ location,\ or\ null\ if\ there\ is\ none.\r\n
comment16.params=row\ col
comment16.target=Location\ getLocationAt(int,\ int)
comment16.text=\r\n\ Returns\ the\ location\ with\ certain\ coordinates.\r\n\ @param\ row\ The\ desired\ row,\r\n\ @param\ col\ The\ desired\ column.\r\n\ @return\ The\ location\ at\ the\ given\ coordinates.\r\n
comment17.params=location\ range
comment17.target=Location\ randomAdjacentLocation(Location,\ int)
comment17.text=\r\n\ Generate\ a\ random\ location\ that\ is\ adjacent\ to\ the\r\n\ given\ location,\ or\ is\ the\ same\ location.\r\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\r\n\ of\ the\ field.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\r\n\ @param\ range\ The\ maximum\ distance\ between\ the\ given\ location\ and\ its\ adjacent\ locations.\r\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\r\n
comment18.params=list1\ list2
comment18.target=java.util.List\ filterLocations(java.util.List,\ java.util.List)
comment18.text=\r\n\ Filters\ an\ original\ list,\ removing\ locations\ that\ were\ overlapping\ with\ the\ filter\ list,\ then\ return\ it.\r\n\ @param\ originalList\ The\ original\ list\ containing\ locations,\ if\ any\ locations\ overlap\ with\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ locations\ in\ filterList,\ remove\ it\ from\ originalList.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n\ @param\ filterList\ The\ list\ containing\ locations\ to\ be\ filtered\ out.\r\n\ @return\ The\ original\ list\ after\ filtering\ out\ overlapping\ locations.\r\n
comment19.params=targetClass
comment19.target=java.util.List\ getUnspawnableLocations(java.lang.Class)
comment19.text=\r\n\ Obtain\ &\ returns\ a\ list\ of\ unspawnable\ locations\ that\ targets\ the\ given\ class's\ spawning\ capabilities.\r\n\ @param\ targetClass\ The\ class\ which\ has\ its\ spawning\ capabilities\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ impaired\ by\ the\ natural\ disaster's\ aftermath.\r\n\ @return\ The\ list\ of\ locations\ where\ the\ given\ object\ class\ can't\ spawn\ upon.\r\n
comment2.params=
comment2.target=void\ reset()
comment2.text=\r\n\ Resets\ the\ field,\ clearing\ all\ locations\ and\ assigning\ an\ Animal&Plant\ container\ to\ each\ location.\r\n
comment20.params=location\ range\ targetClass
comment20.target=java.util.List\ spawnableAdjacentLocations(Location,\ int,\ java.lang.Class)
comment20.text=\r\n\ Obtain\ &\ returns\ a\ list\ of\ spawnable\ locations\ for\ the\ target\ class,\r\n\ via\ filtering\ its\ adjacent\ locations\ against\ unspawnable\ locations.\r\n\ @param\ location\ The\ location\ which\ will\ act\ as\ the\ centre\ point.\r\n\ @param\ range\ The\ maximum\ distance\ between\ the\ given\ location\ and\ its\ adjacent\ locations.\r\n\ @param\ targetClass\ The\ class\ of\ which\ its\ spawnability\ will\ be\ tested\ against\ the\ locations.\r\n\ @return\ The\ list\ containing\ locations\ which\ are\ spawnable\ for\ the\ target\ class's\ offsprings.\r\n
comment21.params=location\ range\ targetClass
comment21.target=java.util.List\ getFreeAdjacentLocations(Location,\ int,\ java.lang.Class)
comment21.text=\r\n\ Get\ a\ shuffled\ list\ of\ the\ free\ adjacent\ locations.\r\n\ @param\ location\ Get\ locations\ adjacent\ to\ this.\r\n\ @param\ range\ The\ maximum\ distance\ between\ the\ given\ location\ and\ its\ adjacent\ locations.\r\n\ @param\ targetClass\ The\ class\ to\ obtain\ free\ adjacent\ locations\ for.\r\n\ @return\ A\ list\ of\ free\ adjacent\ locations.\r\n
comment22.params=location\ range\ targetClass
comment22.target=Location\ freeAdjacentLocation(Location,\ int,\ java.lang.Class)
comment22.text=\r\n\ Try\ to\ find\ a\ free\ location\ that\ is\ adjacent\ to\ the\r\n\ given\ location.\ If\ there\ is\ none,\ return\ null.\r\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\r\n\ of\ the\ field.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\r\n\ @param\ range\ The\ maximum\ distance\ between\ the\ given\ location\ and\ its\ adjacent\ locations.\r\n\ @param\ targetClass\ The\ class\ to\ obtain\ free\ adjacent\ locations\ for.\r\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\r\n
comment23.params=location\ range
comment23.target=java.util.List\ adjacentLocations(Location,\ int)
comment23.text=\r\n\ Return\ a\ shuffled\ list\ of\ locations\ adjacent\ to\ the\ given\ one.\r\n\ The\ list\ will\ not\ include\ the\ location\ itself.\r\n\ All\ locations\ will\ lie\ within\ the\ grid.\r\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ adjacencies.\r\n\ @param\ range\ The\ maximum\ distance\ between\ the\ given\ location\ and\ its\ adjacent\ locations.\r\n\ @return\ A\ list\ of\ locations\ adjacent\ to\ that\ given.\r\n
comment24.params=
comment24.target=int\ getDepth()
comment24.text=\r\n\ Return\ the\ depth\ of\ the\ field.\r\n\ @return\ The\ depth\ of\ the\ field.\r\n
comment25.params=
comment25.target=int\ getWidth()
comment25.text=\r\n\ Return\ the\ width\ of\ the\ field.\r\n\ @return\ The\ width\ of\ the\ field.\r\n
comment3.params=
comment3.target=void\ createAnimalAndPlantContainers()
comment3.text=\r\n\ Allocates\ an\ Animal&Plant\ container\ to\ every\ location\ on\ the\ field.\r\n
comment4.params=
comment4.target=void\ clear()
comment4.text=\r\n\ Empty\ the\ field,\ setting\ all\ locations\ to\ null.\r\n
comment5.params=location
comment5.target=void\ clearAnimal(Location)
comment5.text=\r\n\ Clears\ the\ animal\ at\ given\ location.\r\n\ @param\ location\ The\ location\ to\ clear\ the\ animal\ from.\r\n
comment6.params=location
comment6.target=void\ clearPlant(Location)
comment6.text=\r\n\ Clears\ the\ plant\ at\ given\ location.\r\n\ @param\ location\ The\ location\ to\ clear\ the\ plant\ from.\r\n
comment7.params=animal\ location
comment7.target=void\ placeAnimal(Animal,\ Location)
comment7.text=\r\n\ Places\ given\ animal\ at\ given\ location.\r\n\ @param\ animal\ The\ animal\ to\ be\ placed.\r\n\ @param\ location\ The\ location\ to\ place\ the\ animal\ in.\r\n
comment8.params=plant\ location
comment8.target=void\ placePlant(Plant,\ Location)
comment8.text=\r\n\ Places\ given\ plant\ at\ given\ location\r\n\ @param\ plant\ The\ plant\ to\ be\ placed.\r\n\ @param\ location\ The\ location\ to\ place\ the\ plant\ in.\r\n
comment9.params=animal\ row\ col
comment9.target=void\ placeAnimal(Animal,\ int,\ int)
comment9.text=\r\n\ Place\ given\ animal\ at\ the\ given\ location.\r\n\ If\ there\ is\ already\ an\ animal\ at\ the\ location\ it\ will\r\n\ be\ lost.\r\n\ @param\ animal\ The\ animal\ to\ be\ placed.\r\n\ @param\ row\ Row\ coordinate\ of\ the\ location.\r\n\ @param\ col\ Column\ coordinate\ of\ the\ location.\r\n
numComments=26
